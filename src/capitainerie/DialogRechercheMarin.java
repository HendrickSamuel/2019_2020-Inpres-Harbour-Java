/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package capitainerie;

import Amarrages.Amarrage;
import Amarrages.Ponton;
import Amarrages.Quai;
import Equipage.Equipage;
import Equipage.Marin;
import VehiculesMarins.Bateau;
import VehiculesMarins.MoyenDeTransportSurEau;
import java.util.Enumeration;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author hydro
 */
public class DialogRechercheMarin extends javax.swing.JDialog {

    private Vector<Amarrage> _listeAmarrages;
    
    public DialogRechercheMarin(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }    
    
    public DialogRechercheMarin(java.awt.Frame parent, boolean modal, Vector<Amarrage> listeAmarrages)
    {
        this(parent, modal);
        _listeAmarrages = listeAmarrages;
        Recherche("","");
    }
    
    public void Recherche(String nom, String prenom)
    {
        DefaultTableModel dtm = (DefaultTableModel)this.TableEquipage.getModel();
        dtm.setRowCount(0);
        
        Enumeration enu = _listeAmarrages.elements();
        while(enu.hasMoreElements())
        {
            Amarrage am = (Amarrage)enu.nextElement();
            if(am instanceof Ponton)
                RecherchePonton((Ponton)am,nom, prenom );
            else
            if(am instanceof Quai)
                RechercheQuai((Quai)am, nom, prenom);
        }
        
        if(dtm.getRowCount() == 0)
        {
            Vector ligne = new Vector();
            ligne.add("Aucun marin");
            dtm.addRow(ligne);
        }
    }
    
    public void RecherchePonton(Ponton ponton, String nom, String prenom)
    {
        for(int y = 1; y <= 2; y++)
        {
            MoyenDeTransportSurEau[] mte = ponton.getListe(y);
            for(int i = 0; i < mte.length; i++)
            {
                Bateau bp = (Bateau)mte[i];
                if(bp != null && bp.getEquipage() != null)
                {
                    Equipage equip = bp.getEquipage();

                    ajoutMarin(equip.getCapitaine(), nom, prenom);
                    ajoutMarin(equip.getSecond(), nom, prenom);

                    Enumeration enu = equip.getMarins().elements();
                    while(enu.hasMoreElements())
                    {
                        ajoutMarin((Marin) enu.nextElement(), nom, prenom);
                    } 
                }
            }
        }
    }
    
    public void RechercheQuai(Quai quai, String nom, String prenom)
    {
        MoyenDeTransportSurEau[] mte = quai.getListe();
        for(int i = 0; i < mte.length; i++)
        {
            Bateau bp = (Bateau)mte[i];
            if(bp != null && bp.getEquipage() != null)
            {
                Equipage equip = bp.getEquipage();
                
                ajoutMarin(equip.getCapitaine(), nom, prenom);
                ajoutMarin(equip.getSecond(), nom, prenom);

                Enumeration enu = equip.getMarins().elements();
                while(enu.hasMoreElements())
                {
                    ajoutMarin((Marin) enu.nextElement(), nom, prenom);
                } 
            }
        }
    }
    
    private void ajoutMarin(Marin marin, String nom, String prenom)
    {
        Vector ligne = new Vector();
        DefaultTableModel dtm = (DefaultTableModel)this.TableEquipage.getModel();
        
        if(marin != null)
        {
            if((nom.length() == 0 && prenom.length() == 0) || (nom.toUpperCase().compareTo(marin.getNom().toUpperCase()) == 0 && prenom.toUpperCase().compareTo(marin.getPrenom().toUpperCase()) == 0))
            {
               ligne.add(marin.getFonction());
                ligne.add(marin.getNom());
                ligne.add(marin.getPrenom());
                ligne.add(marin.getDateNaissance());
                dtm.addRow(ligne); 
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField2 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableEquipage = new javax.swing.JTable();
        InputNom = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        InputPrenom = new javax.swing.JTextField();
        SearchButton = new javax.swing.JButton();
        ReinitButton = new javax.swing.JButton();

        jTextField2.setText("jTextField2");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Recherche Marin");
        setResizable(false);

        TableEquipage.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Fonction", "Nom", "Prenom", "Date Naissance"
            }
        ));
        jScrollPane1.setViewportView(TableEquipage);

        jLabel1.setText("Nom:");
        jLabel1.setToolTipText("");

        jLabel2.setText("Prenom:");

        SearchButton.setText("Rechercher");
        SearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchButtonActionPerformed(evt);
            }
        });

        ReinitButton.setText("RÃ©initialiser");
        ReinitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReinitButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(15, 15, 15)
                        .addComponent(InputNom, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(15, 15, 15)
                        .addComponent(InputPrenom, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(SearchButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ReinitButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(InputNom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(SearchButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(InputPrenom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ReinitButton))
                .addGap(0, 25, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchButtonActionPerformed
        String nom = InputNom.getText();
        String prenom = InputPrenom.getText();
        Recherche(nom, prenom);
    }//GEN-LAST:event_SearchButtonActionPerformed

    private void ReinitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReinitButtonActionPerformed
        InputNom.setText("");
        InputPrenom.setText("");
        Recherche("", "");
    }//GEN-LAST:event_ReinitButtonActionPerformed

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DialogRechercheMarin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DialogRechercheMarin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DialogRechercheMarin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DialogRechercheMarin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                DialogRechercheMarin dialog = new DialogRechercheMarin(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField InputNom;
    private javax.swing.JTextField InputPrenom;
    private javax.swing.JButton ReinitButton;
    private javax.swing.JButton SearchButton;
    private javax.swing.JTable TableEquipage;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
