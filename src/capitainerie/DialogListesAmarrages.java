/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package capitainerie;

import Amarrages.Amarrage;
import Amarrages.Ponton;
import Amarrages.Quai;
import VehiculesMarins.Bateau;
import VehiculesMarins.BateauPlaisance;
import VehiculesMarins.MoyenDeTransportSurEau;
import java.util.Enumeration;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author hydro
 */
public class DialogListesAmarrages extends javax.swing.JDialog {

    Vector<Amarrage> _amarrages; 
    String _type;
    
    public DialogListesAmarrages(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }
    
    public DialogListesAmarrages(java.awt.Frame parent, boolean modal, Vector<Amarrage> listeAmarrages,String typeBateau)
    {
        this(parent,modal);
        _amarrages = listeAmarrages;
        _type = typeBateau;
        InitTable();
       
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        TableAmarrages = new javax.swing.JTable();
        ButtonChoose = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Liste des Amarrages");
        setResizable(false);

        TableAmarrages.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Ponton", "Emplacement", "Bateau", "port d'attache"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(TableAmarrages);

        ButtonChoose.setText("Ok");
        ButtonChoose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonChooseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(563, Short.MAX_VALUE)
                .addComponent(ButtonChoose, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(208, 208, 208))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(91, 91, 91)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 657, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(133, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(395, Short.MAX_VALUE)
                .addComponent(ButtonChoose)
                .addGap(54, 54, 54))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(53, 53, 53)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(124, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ButtonChooseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonChooseActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_ButtonChooseActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DialogListesAmarrages.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DialogListesAmarrages.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DialogListesAmarrages.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DialogListesAmarrages.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                DialogListesAmarrages dialog = new DialogListesAmarrages(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonChoose;
    private javax.swing.JTable TableAmarrages;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

private void InitTable()
    { 
        
        if(_type == "Plaisance")
            TableAmarrages.getColumnModel().getColumn(0).setHeaderValue("Ponton(s)");
        else if(_type == "Peche")
            TableAmarrages.getColumnModel().getColumn(0).setHeaderValue("Quai(s)");
            
        
        Enumeration enu = _amarrages.elements();
        while(enu.hasMoreElements())
        {
            Amarrage am = (Amarrage)enu.nextElement();
            if(_type == "Plaisance" && am instanceof Ponton)
                AjouterPonton((Ponton)am);
            else
            if(_type == "Peche" && am instanceof Quai)
            AjouterQuai((Quai)am);
        }
    }

    private void AjouterPonton(Ponton ponton)
    {
        Vector ligne;
        
        DefaultTableModel dtm = (DefaultTableModel)this.TableAmarrages.getModel();
        
        for(int y = 1; y <= 2; y++)
        {
            MoyenDeTransportSurEau[] mte = ponton.getListe(y);
            for(int i = 0; i < mte.length; i++)
            {
                Bateau bp = (Bateau)mte[i];
                ligne = new Vector();
                if(i == 0)
                    ligne.add(ponton.getIdentifiant()+y);
                else
                    ligne.add("");

                ligne.add(i+1);

                if(bp != null)
                {
                    ligne.add(bp.getNom());
                    ligne.add(bp.getPortAttache());
                }
                else
                {
                    ligne.add("");
                    ligne.add("");
                }

                dtm.addRow(ligne);
            }
        }
    }

    private void AjouterQuai(Quai quai)
    {
        Vector ligne;
        DefaultTableModel dtm = (DefaultTableModel)this.TableAmarrages.getModel();
        
        MoyenDeTransportSurEau[] mte = quai.getListe();
        for(int i = 0; i < mte.length; i++)
        {
            Bateau bp = (Bateau)mte[i];
            ligne = new Vector();
            if(i == 0)
                ligne.add(quai.getIdentifiant());
            else
                ligne.add("");

            ligne.add(i+1);

            if(bp != null)
            {
                ligne.add(bp.getNom());
                ligne.add(bp.getPortAttache());
            }
            else
            {
                ligne.add("");
                ligne.add("");
            }

            dtm.addRow(ligne);
        }
    }
}
